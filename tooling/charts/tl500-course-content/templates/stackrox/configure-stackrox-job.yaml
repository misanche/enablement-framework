---
apiVersion: batch/v1
kind: Job
metadata:
  name: configure-stackrox-integration
  namespace: {{ index .Values "stackrox-chart" "stackrox" "namespace" | quote }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      containers:
        - image: quay.io/rht-labs/stack-tl500:latest
          command:
            - /bin/bash
            - -c
            - |
              test {{ .Values.verbose | default "false" }} == true && set -x

              # wait for operator
              while [ true ]; do oc get crd centrals.platform.stackrox.io; if [ $? -eq 0 ]; then break; fi ; sleep 5s; done
              # wait for central
              echo "waiting for stackrox-central ..."
              while test 0 == $(oc -n {{ index .Values "stackrox-chart" "stackrox" "namespace" }} get pod -l app.kubernetes.io/component=central -o name 2>/dev/null | wc -l); do sleep 5; done
              oc -n {{ index .Values "stackrox-chart" "stackrox" "namespace" }} wait pod -l app.kubernetes.io/component=central --for=condition=Ready --timeout=200s
              if [ $? != 0 ]; then
                echo "ðŸ›‘ timed out waiting for central, exiting ðŸ›‘";
                exit 1;
              fi
              sleep 15;

              # generate a registry integration
              ROX_ENDPOINT=central.{{ index .Values "stackrox-chart" "stackrox.namespace" | quote }}
              ROX_ADMIN_PASSWD=$(oc -n {{ index .Values "stackrox-chart" "stackrox" "namespace" }} get secret central-htpasswd -o jsonpath='{.data.password}' | base64 --decode)

              # wait for sericeaccount
              echo "waiting for tl500 pipline service account ..."
              while test 0 == $(oc -n tl500 get sa/pipeline -o name 2>/dev/null | wc -l); do sleep 5; done
              # support newer installation where token not generated automatically
              oc serviceaccounts get-token pipeline -n tl500
              if [ $? != 0 ]; then
                echo '{"apiVersion":"v1","kind":"Secret","metadata":{"name":"pipeline-token","namespace":"tl500","annotations": {"kubernetes.io/service-account.name":"pipeline"}},"type":"kubernetes.io/service-account-token"}' | oc -n tl500 apply -f- 
                oc -n tl500 secret link pipeline pipeline-token
              fi
              TOKEN=$(oc serviceaccounts get-token pipeline -n tl500)
              RET=$(curl -sk -u "admin:${ROX_ADMIN_PASSWD}" "https://$ROX_ENDPOINT/v1/imageintegrations" -d "{\"id\": \"\",\"name\": \"tl500\",\"categories\": [\"REGISTRY\"],\"docker\": {\"endpoint\": \"image-registry.openshift-image-registry.svc:5000\",\"username\": \"\",\"password\": \"${TOKEN}\",\"insecure\": true},\"autogenerated\": false,\"clusterId\": \"\",\"clusters\": [],\"skipTestIntegration\": false,\"type\": \"docker\" }" | jq .error)
              if [[ ${RET} != "null" && ! -z ${RET} ]]; then
                echo "ðŸ›‘ failed to set image integration, exiting - ${RET} ðŸ›‘";
                exit 1;
              fi
              exit 0;
          imagePullPolicy: Always
          name: configure-stackrox-integration
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: configure-stackrox-integration
      serviceAccountName: configure-stackrox-integration
      terminationGracePeriodSeconds: 10
